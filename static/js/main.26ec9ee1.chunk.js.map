{"version":3,"sources":["component/Banner/Banner.module.scss","component/Future/Future.module.scss","api/model/getCurrent.js","api/model/getForecast.js","component/Banner/Temp.jsx","component/Banner/OtherInfo.jsx","component/Banner/WeatherInfo.jsx","component/Banner/City.jsx","component/Banner/Banner.jsx","component/Future/Temp.jsx","component/Future/FutureSet.jsx","component/Future/Future.jsx","component/App/App.js","serviceWorker.js","index.js","component/App/App.module.scss"],"names":["module","exports","weatherApi","require","create","baseURL","get","params","q","units","APPID","process","REACT_APP_API_KEY","then","res","data","main","wind","weather","temp","humidity","speed","catch","err","console","error","output","i","list","date","dt_txt","slice","push","Temp","props","className","style","condition","children","OtherInfo","value","getCurrentWeather","WeatherInfo","state","loading","loadData","bind","setState","this","weatherInfo","Math","round","infoSet","React","Component","City","city","underline","Banner","banner","DAY","WEATHER","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","log","FutureSet","src","alt","getFutureWeather","Future","dayData","day","Date","getDay","future","map","item","App","container","Boolean","window","location","hostname","match","config","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.26ec9ee1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"banner\":\"Banner_banner__n080j\",\"temp\":\"Banner_temp__1QqAp\",\"condition\":\"Banner_condition__3hWZe\",\"infoSet\":\"Banner_infoSet__2vx0c\",\"city\":\"Banner_city__12F9X\",\"underline\":\"Banner_underline__348vh\",\"weatherInfo\":\"Banner_weatherInfo__1oJmG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"future\":\"Future_future__3LkjR\"};","const axios = require('axios');\nconst weatherApi = axios.create({\n    baseURL: 'http://api.openweathermap.org/data/2.5'\n})\n\nfunction getCurrentWeather() {\n\n    return weatherApi.get('/weather',{\n        params: {\n            q: \"Paris\",\n            units: \"metric\",\n            APPID: process.env.REACT_APP_API_KEY\n        }\n    })\n    .then(res => {\n        const {main, wind, weather} = res.data;\n        const {temp, humidity} = main;\n        const output = {\n            temp,\n            wind: wind.speed,\n            humidity,\n            weather: weather[0].main,\n        };\n        return output;\n    })\n    .catch(err => {\n        console.error(err); \n    })\n}\n\nmodule.exports = getCurrentWeather;","const axios = require('axios');\nconst weatherApi = axios.create({\n    baseURL: 'http://api.openweathermap.org/data/2.5'\n})\n\nfunction getForecastWeather() {\n    return weatherApi.get('/forecast', {\n        params: {\n            q: \"Paris\",\n            units: \"metric\",\n            APPID: process.env.REACT_APP_API_KEY,\n        }\n    }).then((res) => {\n        // console.log(res.data.list[30].dt_txt.slice(0, 10));\n        // console.log(new Date(\"2020-08-29\").getDay());\n        const output = []\n        for (let i = 0; i < 40; i ++) {\n            if ((i + 8) % 8 !== 0) {\n                continue;\n            }\n            const data = res.data.list[i];\n            const date = data.dt_txt.slice(0, 10);\n            output.push({\n                date,\n                weather: data.weather[0].main,\n                temp: data.main.temp,\n            })\n        }\n        return output;\n    });\n}\n\nmodule.exports = getForecastWeather;","import React from 'react';\nimport style from './Banner.module.scss';\n\nconst Temp = (props) => (\n    <div>\n        <div>\n            <p className={style.temp}>{props.temp} &#176;</p>\n            <p className={style.condition}>{props.children}</p>\n        </div>\n    </div>\n);\n\nexport default Temp;","import React from 'react';\n\nconst OtherInfo = (props) => (\n    <div>\n        <p>{props.children}</p>\n        <p>{props.value}</p>\n    </div>\n);\n\nexport default OtherInfo;","import React from 'react';\nimport style from './Banner.module.scss';\n\nimport Temp from './Temp';\nimport OtherInfo from './OtherInfo';\nconst getCurrentWeather = require('../../api/model/getCurrent');\n\nclass WeatherInfo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n        };\n\n        this.loadData = this.loadData.bind(this);\n    }\n\n    loadData () {\n        getCurrentWeather().then((data) => {\n            this.setState({\n                data,\n                loading: false,\n            });\n        });\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    render() {\n        return (\n            <div className={style.weatherInfo}>\n                {this.state.loading?(<div>Loading</div>):\n                    (\n                        <div>\n                            <Temp temp={Math.round(this.state.data.temp)}>{this.state.data.weather}</Temp>\n                            <div className={style.infoSet}>\n                                <OtherInfo value={this.state.data.humidity + \" %\"}>Humidity</OtherInfo>\n                                <OtherInfo value={this.state.data.wind + \" KM/h\"}>Wind</OtherInfo>\n                            </div>\n                        </div>\n                    )\n                }\n            </div>\n        )\n    }\n}\n\nexport default WeatherInfo;","import React from 'react';\nimport style from './Banner.module.scss';\n\n\nconst City = (props) => (\n    <div className={style.city}>\n        <p>{props.city}<span className={style.underline}></span></p>\n    </div>\n);\n\nexport default City;","import React from 'react';\nimport style from './Banner.module.scss';\n\nimport WeatherInfo from './WeatherInfo';\nimport City from './City';\n\nconst Banner = () => (\n    <div className={style.banner}>\n        <WeatherInfo />\n        <City city=\"Paris\"/>\n    </div>\n);\n\nexport default Banner;","import React from 'react';\n\n\nconst Temp = (props) => (\n    <div>\n        <div>\n            <p>{props.temp} &#176;</p>\n        </div>\n    </div>\n);\n\nexport default Temp;","import React from 'react';\nimport Temp from './Temp';\n\nconst DAY = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FIR\", \"SAT\"];\nconst WEATHER = {\n    Thunderstorm: \"11d\",\n    Drizzle: \"09d\",\n    Rain: \"10d\",\n    Snow: \"13d\",\n    Atmosphere: \"50d\",\n    Clear: \"01d\",\n    Clouds: \"02d\",\n}\n\nconst vara = \"THUNDERSTORM\";\n\nconsole.log(WEATHER[vara]);\n    // {key: \"THUNDERSTORM\", value: },\n    // {key: \"DRIZZLE\", value: \"09d\"},\n    // {key: \"RAIN\", value: \"10d\"},\n    // {key: \"SNOW\", value: \"13d\"},  \n\nconst FutureSet = (props) => (\n    <div>\n        {console.log(WEATHER[props.weather])}\n        <Temp temp={props.temp}></Temp>\n        <img src={`http://openweathermap.org/img/wn/${WEATHER[props.weather]}@2x.png`} alt=\"weather\"/>\n        <p>{DAY[props.children]}</p>\n    </div>\n);\n\nexport default FutureSet;","import React from 'react';\nimport FutureSet from './FutureSet';\nimport style from './Future.module.scss';\n\nconst getFutureWeather = require('../../api/model/getForecast');\n\nclass Future extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            loading: true,\n        }\n\n        this.loadData = this.loadData.bind(this);\n    }\n\n    loadData() {\n        const data = [];\n        getFutureWeather().then((res) => {\n            for (let i = 0; i < 5; i ++) {\n                const dayData = res[i];\n                data.push({\n                    day: new Date(dayData.date).getDay(),\n                    weather: dayData.weather,\n                    temp: dayData.temp,\n                });\n            }\n            this.setState({\n                data,\n                loading: false,\n            });\n        });\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    render() {\n        \n        return (\n            (this.state.loading)?(<div>Loading</div>):(\n                <div className={style.future}>\n                    {this.state.data.map((item) => {\n                        return(\n                            <FutureSet temp={Math.round(item.temp)} weather={item.weather}>{item.day}</FutureSet>\n                        )\n                    })}\n\n                </div>    \n            )\n                \n\n        )\n    }\n}\n\nexport default Future;","import React from 'react';\nimport Banner  from '../Banner';\nimport Future from '../Future';\nimport './App.css';\nimport style from './App.module.scss';\n\nfunction App() {\n  return (\n    <div className={style.container}>\n      <div className={style.App}>\n          <Banner>Cloudy</Banner>\n          <Future />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst dotenv = require('dotenv');\ndotenv.config();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2BmfR\",\"container\":\"App_container__39Y_q\"};"],"sourceRoot":""}